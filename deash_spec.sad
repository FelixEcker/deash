{$meta author} FelixEckert
{$meta date} 05-01-2022
{$start}
{$title} deash Specification

{$begin-section} parsing
{$head} Parsing Commands

This section specifies how Commands should be parsed, this includes:
  1. Invoke-Search-Order
  2. Piping, chaining and forking Commands
  3. C-Style String-Escaping

{$begin-section} invoke-search-order
{$sub-head} Invoke-Search-Order

The Invoke-Search-Order specifies which places are searched in what order
for the specific Invoke. An Invoke means a binary, alias or exported procedures.

By Default deash searches the following places in this order:
  1. Preffered Exported Procedures
  2. Aliases
  3. /bin
  4. /usr/bin
  5. Exported Procedures
{$end-section}
{$begin-section} pipes-chains-forks
{$head} Piping, chaing and forking Commands

Just like bash, deash supports piping the output of one command into another,
chaining commands and forking of Commands
{$end-section}
{$end-section}
{$begin-section} script-syntax
{$head} Script Syntax

This section specifies the syntax of a deash script.
deash syntax follows the style of Pascal/ALGOL.

0. Comments
1. Code-Blocks
2. Variables
3. Conditionals
4. Procedures

{$begin-section} comments
{$sub-head} Comments

Line-Comments are made using a Pound-Sign (#) and block-comments are opened and closed
using curly braces.

Example: {$style fraktur}
  # Line comment
  { Block Comment
    very cool
    yes } {$reset-all}
{$end-section}
{$begin-section} code-blocks
{$sub-head} Code-Blocks

Code blocks in deash are opened using the begin keyword and closed using the end keyword.

Example: {$style fraktur}
  begin
    # some code....
  end {$reset-all}
{$end-section}
{$begin-section} variables
{$sub-head} Variables

deash supports Strings (String), Integers (Integer) and Booleans (Boolean). Strings are C-Style, since thats the more based way,
Integers are always Signed 32-Bit. Boolean literals are true and false.

Strings are empty, Integers are 0 and Booleans are false by default.

Variables are declared using the var keyword and can be either declared for a procedure or an entire
script. If a Variable is not immediatly initialised, its type is to be specified using a colon
followed by the type name.

Example: {$style fraktur}
  var
    strvar = '';
    _strvar: String;
    bool = true;
    _bool: Boolean;
    num = 100;
    _num: Integer; {$reset-all}
{$end-section}
{$begin-section} conditionals
{$sub-head} Conditionals

deash has support for conditional branching which can exclusively be achieved through If-Elif-Else
conditions. These are capable of evaluating integer, boolean and string comparisons. A condition has
to be wrapped inside parenthesis, the then keyword is used to signal the end of conditions and the
start of the code which is to be executed if the conditions are True.

Conditionals can be chained using the and keyword and the or keyword, which perform their respective
logical operations on their left and right standing conditions

To check if two values are equal a single equals-sign is used, to check if an integer value is
greater or lesser than another the < and > signs are to be used. The equal- and lesse-than signs
can be combined to form the "is not equal"-diamond operator.

To negate a condition the not keyword is to be used.

Example: {$style fraktur}
  if (bool) and (strvar = '') then
    # do something
  elif (strvar = 'test') then
    # do another thing
  else
    # do a fallback thing 

  if (SH_MODE <> MODE_INTERACTIVE) then exit; {$reset-all}
{$end-section}
{$begin-section} procedures
{$sub-head} Procedures

deash supports two kinds of procedures, script-private procedures and
exported procedures. Exported procedures will be stored within the shell
and can be called from other scripts or in the shell.

Procedures are declared using the proc keyword, this is to be followed by
the procedures name. If the procedure takes parameters these are to be declared
within parenthesis after the name, seperated by semi-colons. If there are no
parameters, the parenthesis mustn't be added. The declaration is ended with a
semi-colon.

Example: {$style fraktur}
  proc Foo;
  begin
    echo Bar
  end

  proc Bar(writeFoo: Boolean);
  begin
    if writeFoo then echo Foo;
  end {$reset-all}

Procedures can be exported using the export modifier behind their declaration.

Example: {$style fraktur}
  proc Ping(param: String); export;
  begin
    echo >Concat('Pong: ', param);
  end {$reset-all}

deash supports "preferring" procedures over binaries when an invoke is searched,
this is done by adding the preffered modifier behind the declaration.

Example: {$style fraktur}
  proc ls; export; preffered;
  begin
    exa --color=auto -l
  end; {$reset-all}
{$end-section}
{$end-section}
