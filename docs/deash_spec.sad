{$meta author} MarieEckert
{$meta date} 05-01-2022
{$start}
{$title} deash Specification

{$begin-section} contents
{$head} Contents
  0. Foreword
  1. Parsing Commands
  2. Script Syntax
  3. Builtin Commands, Procedures and Variables
{$end-section}

{$begin-section} foreword
{$head} Foreword

A quick note before the actual specification starts: This document will probably never be
complete and experience changes in likely all sections. So really this is more of a documentation
and overview of how the shell functions and the current point than a solid specification.
{$end-section}

{$begin-section} parsing
{$head} Parsing Commands

This section specifies how Commands should be parsed, this includes:
  1. Piping and chaining Commands
  2. C-Style String-Escaping
  3. Reserved Characters & Keywords

{$begin-section} pipes-chains
{$sub-head} Piping and chaining Commands

Just like bash, deash supports piping and chaining commands. By default this
is implemented using the Pipe and Chain functions, however the standardlibrary
implements macros to allow for bash-style syntax for this.

{$style bold} Pipe procedure {$reset-all} {$style fraktur}
  Pipe(source_command: String; dest_command: String; pipe_mode: Integer); {$reset-all}

{$style bold} Chain / Sequence procedure {$reset-all} {$style fraktur}
  Seq(first_command: String; second_command: String; chain_condition: Integer); {$reset-all}
{$end-section}
{$begin-section} string-escaping
{$sub-head} C-Style String-Escaping

deash supports escaping Reserved Characters as well as White-Spaces and the backslash
using the backslash. 
{$end-section}
{$begin-section} reserved-characters-keywords
{$sub-head} Reserved Characters & Keywords

This section details a list of reserved characters and keywords alongside what they are
used for.

{$style underline} Characters {$reset-all}
{$style bold} # {$reset-all}
  Make a Line Comment

{$style bold} { {$reset-all}
  Open a Block-Comment

{$style bold} } {$reset-all}
  Close a Block-Comment

{$style bold} > {$reset-all}
  Start the explicit invocation of a procedure

{$style bold} ; {$reset-all}
  Terminate a procedure invocation or a procedure, (environment) variable or alias declaration.

{$style bold} : {$reset-all}
  Seperate a variable name from its declared type.

{$style bold} & {$reset-all}
  Used to execute a process in the background.

{$style underline} Keywords {$reset-all}
{$style bold} proc {$reset-all}
  Used to declare a procedure

{$style bold} for {$reset-all}
  Used to declare a for-loop

{$style bold} loop {$reset-all}
  Used to declare a loop-loop

{$style bold} break {$reset-all}
  Used to "break out" of a loop

{$style bold} alias {$reset-all}
  Used to start the alias-declaration section.

{$style bold} env {$reset-all}
  Used to start the environment-variable-declaration section.

{$style bold} export {$reset-all}
  Used to export a procedure into the Shell.

{$style bold} preferred {$reset-all}
  Used to add an exported function to the "preffered procedures" list.

{$style bold} Integer {$reset-all}
  Used to set a Variables type to Integer

{$style bold} String {$reset-all}
  Used to set a Variables type to String

{$style bold} Boolean {$reset-all}
  Used to set a Variables type to Boolean

{$style bold} end {$reset-all}
  Used to terminate a code-block
{$end-section}
{$end-section}

{$begin-section} script-syntax
{$head} Script Syntax

This section specifies the syntax of a deash script.
deash syntax follows the style of Pascal/ALGOL.

0. Comments
1. Code-Blocks
2. Variables
3. Conditionals
4. Procedures
5. Loops

{$begin-section} comments
{$sub-head} Comments

Line-Comments are made using a Pound-Sign (#) and block-comments are opened and closed
using curly braces.

Example: {$style fraktur}
  # Line comment
  { Block Comment
    very cool
    yes } {$reset-all}
{$end-section}
{$begin-section} code-blocks
{$sub-head} Code-Blocks

{$style bold;cursive} TO BE REMOVED (?) {$reset-all}
Code blocks in deash are opened using the begin keyword and closed using the end keyword.

Example: {$style fraktur}
  begin
    # some code....
  end {$reset-all}
{$end-section}
{$begin-section} variables
{$sub-head} Variables

deash supports Strings (String), Integers (Integer) and Booleans (Boolean). Strings are C-Style, since thats the more based way,
Integers are always Signed 32-Bit. Boolean literals are true and false.

Strings are empty, Integers are 0 and Booleans are false by default.

Variables are declared using the var keyword and can be either declared for a procedure or an entire
script. If a Variable is not immediatly initialised, its type is to be specified using a colon
followed by the type name.

Example: {$style fraktur}
  var
    strvar = '';
    _strvar: String;
    bool = true;
    _bool: Boolean;
    num = 100;
    _num: Integer; 
  end {$reset-all}
{$end-section}
{$begin-section} conditionals
{$sub-head} Conditionals

deash has support for conditional branching which can exclusively be achieved through If-Elif-Else
conditions. These are capable of evaluating integer, boolean and string comparisons. A condition has
to be wrapped inside parenthesis, the then keyword is used to signal the end of conditions and the
start of the code which is to be executed if the conditions are True.

Conditionals can be chained using the and keyword and the or keyword, which perform their respective
logical operations on their left and right standing conditions

To check if two values are equal a single equals-sign is used, to check if an integer value is
greater or lesser than another the < and > signs are to be used. The equal- and lesse-than signs
can be combined to form the "is not equal"-diamond operator.

To negate a condition the not keyword is to be used.

An If(-Else(-Elif)) block is to be terminated using the end keyword.

Example: {$style fraktur}
  if (bool) and (strvar = '') then
    # do something
  elif (strvar = 'test') then
    # do another thing
  else
    # do a fallback thing 
  end

  if (SH_MODE <> MODE_INTERACTIVE) then 
    exit; 
  end {$reset-all}
{$end-section}
{$begin-section} procedures
{$sub-head} Procedures

deash supports two kinds of procedures, script-private procedures and
exported procedures. Exported procedures will be stored within the shell
and can be called from other scripts or in the shell.

Procedures are declared using the proc keyword, this is to be followed by
the procedures name. If the procedure takes parameters these are to be declared
within parenthesis after the name, seperated by semi-colons. If there are no
parameters, the parenthesis mustn't be added. The declaration is ended with a
semi-colon.

Example: {$style fraktur}
  proc Foo;
    echo Bar
  end

  proc Bar(writeFoo: Boolean);
    if writeFoo then echo Foo;
  end {$reset-all}

Procedures can be exported using the export modifier behind their declaration.

Example: {$style fraktur}
  proc Ping(param: String); export;
    echo >Concat('Pong: ', param);
  end {$reset-all}

deash supports "preferring" procedures over binaries when an invoke is searched,
this is done by adding the preffered modifier behind the declaration.

Example: {$style fraktur}
  proc ls; export; preffered;
    exa --color=auto -l
  end; {$reset-all}

deash supports two calling conventions: shell-like and pascal-like.
A shell like call is structured as follows: {$style fraktur}
  < procedure-name > < parameters, space seperated > {$reset-all}

Whereas a pascal-like call is structured like this: {$style fraktur}
  < procedure-name >(< paramters, comma seperated >) {$reset-all}

A procedure always has the local field {$style italic} result {$reset-all} of the String type,
its contents are used as a procedures return-value. If result is never set in the procedure, it
will just be an empty string.

{$style bold} NOTE: {$reset-all} {$style italic} When using the pascal-like calling convention,
the binary search paths as well as aliases are ignored! {$reset-all}
{$end-section}
{$begin-section} loops
{$sub-head} Loops

deash also supports looping code using the {$style italic} for {$reset-all} and {$style italic} loop {$reset-all} keywords.
This section will detail the syntax of these loops.

{$begin-section} loop-for
{$sub-head} For-Loops

for loops work by creating a temporary iterator variable which is assigned to an array/set that must
also be created within the loops declaration. The basic syntax looks like this: {$style fraktur}
  for ITERATOR in ARRAY do
    # looped code
  end {$reset-all}

The iterators name may be any variable name which is not already in use, the iterator is discarded
after the for loop ends.
The array/set which is to be iterated over may be an array of Integers or Characters, although future
support for arrays of all datatypes is planned. Integer arrays may also be reffered to as ranges,
these are declared like this: {$style fraktur}
  < Integer Literal or Variable >..< Integer Literal or Variable > {$reset-all}

To iterate over characters you must either provide a String literal or variable, this will be
automatically sliced into an array of characters.

A for-loop will stop if either the iterator hits the end of the array/set or  the script exits, 
the {$style italic} break {$reset-all} keyword is hit  or the (if its placed in a procedure) procedure its located in is returned from.

{$style bold} NOTE: {$reset-all} I am well aware that this for loop is very limiting but I currently
don't have the time or energy to think of a good way to implement arrays.
{$end-section}
{$begin-section} loop-while
{$sub-head} Loop-Loops

"loop" loops whill repeat indefinetly unless the script exits, the {$style italic} break {$reset-all} keyword is hit 
or the (if its placed in a procedure) procedure its located in is returned from.
{$end-section}
{$end-section}
{$end-section}

{$begin-section} builtin-cmds
{$head} Built-In Commands, Procedures and Variables

This section details all Builtin variables, commands/procedures, their parameters and what they do.

{$begin-section} builtin-cmds-cmds
{$style underline}
{$sub-head} Commands
{$reset-all}
{$begin-section} purr
{$sub-head} purr

purr prints out all {$style italic} relevant {$reset-all} data about the current
shell session. More details can be found at {$style underline} https://github.com/FelixEcker/deash/blob/master/docs/purr.sad {$reset-all}
{$end-section}

{$begin-section} exec
{$sub-head} exec

Like bash's exec command, exec will replace the shells process with the specified process and
its parameters.

Example: {$style fraktur}
  exec bspwm {$reset-all}
{$end-section}

{$begin-section} exit
{$sub-head} exit

Terminates the current shell-session.
{$end-section}
{$end-section}

{$begin-section} builtin-cmds-procs
{$style underline}
{$sub-head} Procedures
{$reset-all}
{$begin-section} paramstr
{$sub-head} ParamStr

The ParamStr procedure can be used in scripts to access parameters which were passed to it,
it takes a single Integer as its parameter which specifies which parameter to get.

The 0th Param is always the path to the script, if the passed number exceeds the number of
parameters an empty string will be returned.

{$style bold} Procedure Definition {$reset-all} {$style fraktur}
  procedure ParamStr(ParamIndex: Integer); export; {$reset-all}
{$end-section}

{$begin-section} builtin-cmds-vars
{$style underline}
{$sub-head} Variables
{$reset-all}

deash has internal standard variables reffered to as ShellEnv. These variables are read-only
and prefixed with {$style italic} SH_ {$reset-all} .
Below is a list of all these variables.

{$style bold} SH_MODE {$reset-all}
The current shell mode. Values may be {$style italic} INTERACTIVE {$reset-all} or {$style italic}
SCRIPT_EXEC {$reset-all} .

{$style bold} SH_VERSION {$reset-all}
The current shell version.

{$style bold} SH_AUTHOR {$reset-all}
The author.

{$style bold} SH_WORKDIR {$reset-all}
The current working directory of the shell. This variable may be changed when using the cd command.

{$style bold} SH_BINLOC {$reset-all}
The location of the shells binary.
{$end-section}
{$end-section}
